/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.URL;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JProgressBar;
import javax.swing.JRootPane;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Alexis
 */
public class Downloader extends javax.swing.JPanel implements Observer {
    
    private Download selectedDownload;
    // Flag for whether or not table selection is being cleared.
    private boolean clearing;
    private DownloadsTableModel tableModel = new DownloadsTableModel();
    private JRootPane rootPane = this.getRootPane();

    /**
     * Creates new form Downloader
     */
    public Downloader() {
        initComponents();
        table.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                tableSelectionChanged();
            }
        });

        // Set up ProgressBar as renderer for progress column.
        ProgressRenderer renderer = new ProgressRenderer(0, 100);
        renderer.setStringPainted(true); // show progress text
        table.setDefaultRenderer(JProgressBar.class, renderer);

        // Set table's row height large enough to fit JProgressBar.
        table.setRowHeight(
                (int) renderer.getPreferredSize().getHeight());
    }

    // Called when table row selection changes.
    private void tableSelectionChanged() {
        /* Unregister from receiving notifications
         from the last selected download. */
        if (selectedDownload != null) {
            selectedDownload.deleteObserver(Downloader.this);
        }

        /* If not in the middle of clearing a download,
         set the selected download and register to
         receive notifications from it. */
        if (!clearing && table.getSelectedRow() != -1) {
            selectedDownload =
                    tableModel.getDownload(table.getSelectedRow());
            selectedDownload.addObserver(Downloader.this);
            updateButtons();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable(this.tableModel);
        jPanel1 = new javax.swing.JPanel();
        pauseButton = new javax.swing.JButton();
        resumeButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        pausarTodo = new javax.swing.JButton();
        renaudarTodo = new javax.swing.JButton();

        table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMouseClicled(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        pauseButton.setText("Pausar");
        pauseButton.setEnabled(false);
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonPausarActionPerformed(evt);
            }
        });

        resumeButton.setText("Renaudar");
        resumeButton.setEnabled(false);
        resumeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renaudarActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancelar");
        cancelButton.setEnabled(false);
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarActionPerformed(evt);
            }
        });

        clearButton.setText("Limpiar");
        clearButton.setEnabled(false);
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLimpiarActionPerformed(evt);
            }
        });

        pausarTodo.setText("Pausar Todo");
        pausarTodo.setEnabled(false);
        pausarTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pausarTodoActionPerformed(evt);
            }
        });

        renaudarTodo.setText("Renaudar Todo");
        renaudarTodo.setEnabled(false);
        renaudarTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renaudarTodoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pauseButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pausarTodo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resumeButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(renaudarTodo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pauseButton)
                    .addComponent(resumeButton)
                    .addComponent(cancelButton)
                    .addComponent(clearButton)
                    .addComponent(pausarTodo)
                    .addComponent(renaudarTodo))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(83, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(82, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void botonPausarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonPausarActionPerformed
        actionPause();
    }//GEN-LAST:event_botonPausarActionPerformed
    
    private void renaudarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renaudarActionPerformed
        actionResume();
    }//GEN-LAST:event_renaudarActionPerformed
    
    private void cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarActionPerformed
        actionCancel();
    }//GEN-LAST:event_cancelarActionPerformed
    
    private void botonLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLimpiarActionPerformed
        actionClear();
    }//GEN-LAST:event_botonLimpiarActionPerformed
    
    private void pausarTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pausarTodoActionPerformed
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            if (tableModel.getDownload(i).getStatus() ==0) {
                tableModel.getDownload(i).pause();
            }
        }
        updateButtons();
    }//GEN-LAST:event_pausarTodoActionPerformed
    
    private void renaudarTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renaudarTodoActionPerformed
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            if (tableModel.getDownload(i).getStatus() == 1) {
                tableModel.getDownload(i).resume();
            }
        }
        updateButtons();
    }//GEN-LAST:event_renaudarTodoActionPerformed
    
    private void tablaMouseClicled(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMouseClicled
        if (SwingUtilities.isRightMouseButton(evt)) {
            final int rowSelected = this.table.rowAtPoint(evt.getPoint());
            this.table.setRowSelectionInterval(rowSelected, rowSelected);
            final int estado = tableModel.getDownload(rowSelected).getStatus();
            JPopupMenu popup = new JPopupMenu();
            JMenuItem iPausar = new JMenuItem("Pausar");
            JMenuItem iPausarTodo = new JMenuItem("Pausar Todo");
            JMenuItem iRenaudar = new JMenuItem("Renaudar");
            JMenuItem iRenaudarTodo = new JMenuItem("Renaudar Todo");
            JMenuItem iCancelar = new JMenuItem("Cancelar");
            JMenuItem iLimpiar = new JMenuItem("Limpiar");
            switch (estado) {
                case Download.DOWNLOADING:
                    iPausar.setEnabled(true);
                    iPausarTodo.setEnabled(true);
                    iRenaudar.setEnabled(false);
                    iRenaudarTodo.setEnabled(true);
                    iCancelar.setEnabled(true);
                    iLimpiar.setEnabled(true);
                    break;
                case Download.PAUSED:
                    iPausar.setEnabled(false);
                    iPausarTodo.setEnabled(true);
                    iRenaudar.setEnabled(true);
                    iRenaudarTodo.setEnabled(true);
                    iCancelar.setEnabled(true);
                    iLimpiar.setEnabled(true);
                    break;
                case Download.ERROR:
                    iPausar.setEnabled(false);
                    iPausarTodo.setEnabled(false);
                    iRenaudar.setEnabled(false);
                    iRenaudarTodo.setEnabled(true);
                    iCancelar.setEnabled(false);
                    iLimpiar.setEnabled(true);
                    break;
                default: // COMPLETE or CANCELLED
                    iPausar.setEnabled(false);
                    iPausarTodo.setEnabled(false);
                    iRenaudar.setEnabled(false);
                    iRenaudarTodo.setEnabled(false);
                    iCancelar.setEnabled(false);
                    iLimpiar.setEnabled(true);
            }
            iPausar.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    Thread hiloDescarga = new Thread() {
                        @Override
                        public void run() {
                            try {
                                actionPause();
                                this.interrupt();
                            } catch (Exception ex) {
                                System.out.println("error downloader3");
                                JOptionPane.showMessageDialog(rootPane, ex.getMessage());
                            }
                        }
                    };
                    hiloDescarga.start();
                }
            });
            iPausarTodo.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    Thread hiloDescarga = new Thread() {
                        @Override
                        public void run() {
                            try {
                                for (int i = 0; i < tableModel.getRowCount(); i++) {
                                    if (tableModel.getDownload(i).getStatus() != 3) {
                                        tableModel.getDownload(i).pause();
                                    }
                                }
                                updateButtons();
                                this.interrupt();
                            } catch (Exception ex) {
                                System.out.println("error downloader4");
                                JOptionPane.showMessageDialog(rootPane, ex.getMessage());
                            }
                        }
                    };
                    hiloDescarga.start();
                }
            });
            iRenaudar.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    Thread hiloDescarga = new Thread() {
                        @Override
                        public void run() {
                            try {
                                actionResume();
                                this.interrupt();
                            } catch (Exception ex) {
                                JOptionPane.showMessageDialog(rootPane, ex.getMessage());
                            }
                        }
                    };
                    hiloDescarga.start();
                }
            });
            iRenaudarTodo.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    Thread hiloDescarga = new Thread() {
                        @Override
                        public void run() {
                            try {
                                for (int i = 0; i < tableModel.getRowCount(); i++) {
                                    if (tableModel.getDownload(i).getStatus() != 3) {
                                        tableModel.getDownload(i).resume();
                                    }
                                }
                                updateButtons();
                                this.interrupt();
                            } catch (Exception ex) {
                                JOptionPane.showMessageDialog(rootPane, ex.getMessage());
                            }
                        }
                    };
                    hiloDescarga.start();
                }
            });
            iCancelar.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    Thread hiloDescarga = new Thread() {
                        @Override
                        public void run() {
                            try {
                                if (tableModel.getDownload(rowSelected).getStatus()==estado) {
                                actionCancel();}
                                this.interrupt();
                            } catch (Exception ex) {
                                JOptionPane.showMessageDialog(rootPane, ex.getMessage());
                            }
                        }
                    };
                    hiloDescarga.start();
                }
            });
            iLimpiar.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    Thread hiloDescarga = new Thread() {
                        @Override
                        public void run() {
                            try {
                                actionClear();
                                this.interrupt();
                            } catch (Exception ex) {
                                JOptionPane.showMessageDialog(rootPane, ex.getMessage());
                            }
                        }
                    };
                    hiloDescarga.start();
                }
            });
            popup.add(iPausar);
            popup.add(iPausarTodo);
            popup.add(iRenaudar);
            popup.add(iRenaudarTodo);
            popup.add(iCancelar);
            popup.add(iLimpiar);
            Component c = (Component) evt.getSource();
            popup.show(c, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_tablaMouseClicled
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton pausarTodo;
    private javax.swing.JButton pauseButton;
    private javax.swing.JButton renaudarTodo;
    private javax.swing.JButton resumeButton;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    public void actionAdd(String nombre, String url) {
        URL verifiedUrl = verifyUrl(url);
        if (verifiedUrl != null) {
            tableModel.addDownload(new Download(nombre, verifiedUrl));
            pausarTodo.setEnabled(true);
        } else {
            JOptionPane.showMessageDialog(this,
                    "Invalid Download URL", "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }    
    
    private URL verifyUrl(String url) {
        // Only allow HTTP URLs.
        if (!url.toLowerCase().startsWith("http://")) {
            return null;
        }

        // Verify format of URL.
        URL verifiedUrl = null;
        try {
            verifiedUrl = new URL(url);
        } catch (Exception e) {
            return null;
        }

        // Make sure URL specifies a file.
        if (verifiedUrl.getFile().length() < 2) {
            return null;
        }
        
        return verifiedUrl;
    }

    // Pause the selected download.
    private void actionPause() {
        try {
        selectedDownload.pause();
        updateButtons();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }

    // Resume the selected download.
    private void actionResume() {
        try {
        selectedDownload.resume();
        updateButtons();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }

    // Cancel the selected download.
    private void actionCancel() {
        try {
        selectedDownload.cancel();
        updateButtons();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }

    // Clear the selected download.
    private void actionClear() {
        try {
        clearing = true;
        for (int i = tableModel.getRowCount() - 1; i >= 0; i--) {
            if (tableModel.getDownload(i).getStatus() == 3 || tableModel.getDownload(i).getStatus() == 2 || tableModel.getDownload(i).getStatus() == 4) {
                tableModel.clearDownload(i);
            }
        }
        clearing = false;
        selectedDownload = null;
        updateButtons();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }

    /* Update each button's state based off of the
     currently selected download's status. */
    private void updateButtons() {
        if (selectedDownload != null) {
            int status = selectedDownload.getStatus();
            switch (status) {
                case Download.DOWNLOADING:
                    pauseButton.setEnabled(true);
                    pausarTodo.setEnabled(true);
                    resumeButton.setEnabled(false);
                    renaudarTodo.setEnabled(true);
                    cancelButton.setEnabled(true);
                    clearButton.setEnabled(true);
                    break;
                case Download.PAUSED:
                    pauseButton.setEnabled(false);
                    pausarTodo.setEnabled(true);
                    resumeButton.setEnabled(true);
                    renaudarTodo.setEnabled(true);
                    cancelButton.setEnabled(true);
                    clearButton.setEnabled(true);
                    break;
                case Download.ERROR:
                    pauseButton.setEnabled(false);
                    pausarTodo.setEnabled(false);
                    resumeButton.setEnabled(false);
                    renaudarTodo.setEnabled(true);
                    cancelButton.setEnabled(false);
                    clearButton.setEnabled(true);
                    break;
                default: // COMPLETE or CANCELLED
                    pauseButton.setEnabled(false);
                    pausarTodo.setEnabled(false);
                    resumeButton.setEnabled(false);
                    renaudarTodo.setEnabled(false);
                    cancelButton.setEnabled(false);
                    clearButton.setEnabled(true);
            }
        } else {
            // No download is selected in table.
            if (tableModel.getRowCount() != 0) {
                pausarTodo.setEnabled(true);
                renaudarTodo.setEnabled(true);
                clearButton.setEnabled(true);
            }
            pauseButton.setEnabled(false);
            resumeButton.setEnabled(false);
            cancelButton.setEnabled(false);
        }
    }

    /* Update is called when a Download notifies its
     observers of any changes. */
    @Override
    public void update(Observable o, Object arg) {
        // Update buttons if the selected download has changed.
        if (selectedDownload != null && selectedDownload.equals(o) | tableModel.getRowCount() != 0) {
            updateButtons();
        }
    }
}
